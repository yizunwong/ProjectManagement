/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.projectmanagement.gui.panel;

import com.mycompany.projectmanagement.FileController;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.GridLayout;
import java.awt.Paint;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.json.JSONArray;

/**
 *
 * @author yizun
 */
public class PieChart extends javax.swing.JPanel {

    public int student_count, lecturer_count, project_manager_count;
    public List<PieChartData> data;

    /**
     * Creates new form PieChart
     */
    public PieChart() {
        initComponents();
        this.data = new ArrayList<>();
        data.add(new PieChart.PieChartData("Default", "", "Role", new String[]{}));
        data.add(new PieChart.PieChartData("Default", "", "Entry Level", new String[]{}));
        data.add(new PieChart.PieChartData("Default", "", "Gender", new String[]{}));
        initialPieChart(data,null);
    }

    public void setData(List<PieChartData> pieChartDataList,JSONArray searchArray) {
        this.data = pieChartDataList;
        initialPieChart(data, searchArray);

    }

    public static class PieChartData {

        private final String title;
        private final String fileName;
        private final String category;
        private final String[] values;

        public PieChartData(String title, String fileName, String category, String[] values) {
            this.title = title;
            this.fileName = fileName;
            this.category = category;
            this.values = values;
        }

        public String getTitle() {
            return title;
        }

        public String getFileName() {
            return fileName;
        }

        public String getCategory() {
            return category;
        }

        public String[] getValues() {
            return values;
        }
    }

    public final void initialPieChart(List<PieChartData> pieChartDataList, JSONArray searchArray) {
        setLayout(new BorderLayout());
        FileController.FileService fs = new FileController.FileService();

        JPanel chartPanel = new JPanel(new GridLayout(1, pieChartDataList.size()));

        for (PieChartData pieData : pieChartDataList) {
            HashMap<String, Integer> count = fs.countOccurrences(pieData.getFileName(), pieData.getCategory(), pieData.getValues(), searchArray);
            ModelPieChart model = new ModelPieChart(pieData.getTitle(), count);
            chartPanel.add(createPieChartPanel(model));
        }

        add(chartPanel, BorderLayout.CENTER);
    }

    public void refreshPieChart(List<PieChartData> pieChartDataList, JSONArray searchArray) {
        // Remove all components
        removeAll();
        // Reinitialize the pie charts
        initialPieChart(pieChartDataList, searchArray );
        // Revalidate and repaint the panel to update the display
        revalidate();
        repaint();
    }

    private JPanel createPieChartPanel(ModelPieChart model) {
        JFreeChart pieChart = ChartFactory.createPieChart(model.getTitle(), model.createDataset(), true, true, false);
        PiePlot plot = (PiePlot) pieChart.getPlot();

        // Set background to a gradient black color
        Paint[] paintArray = {new Color(0, 0, 0), new Color(50, 50, 50)};
        GradientPaint gradientPaint = new GradientPaint(0, 0, (Color) paintArray[0], 300, 300, (Color) paintArray[1]);
        plot.setBackgroundPaint(gradientPaint);

        ChartPanel pieChartPanel = new ChartPanel(pieChart);
        pieChartPanel.setPreferredSize(new Dimension(300, 300)); // Adjust dimensions as needed

        JPanel chartPanelContainer = new JPanel(new BorderLayout());
        chartPanelContainer.add(pieChartPanel, BorderLayout.CENTER);
        return chartPanelContainer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
